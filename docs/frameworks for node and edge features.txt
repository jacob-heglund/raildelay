After looking at edge-based feature papers yesterday and today, here are my main findings:
1. The framework of "message passing layers" allows for architectures that incorporate edge-based features
-- However these architectures are not as well-studied and open source code is not as widely available as architectures that only use node-based features

2. GAT could be modified to include edge-based features because it is an example of a message passing architecture
-- GAT is the method we are going to use for research into Dynamic Graphs (graph structure that changes with time)
-- However I don't fully understand how to modify GAT to allow this change, so I would need to spend more time up front to understand the required modifications

3. There is a mathematical object called a Line Graph which acts like the "inverse", switching nodes and edges in a graph
-- This is basically the structure we talked about during our meeting yesterday
-- Converting from a graph to its line graph is implemented in NetworkX, meaning if we provide a graph representing the rail network with stations as nodes, it will output a graph with nodes as the links between stations
-- This would allow us to leverage our existing STGCN code with little to no up-front time investment
https://en.wikipedia.org/wiki/Line_graph
https://networkx.github.io/documentation/networkx-1.10/reference/generated/networkx.generators.line.line_graph.html

4. Given the time remaining and work yet to be done, I am not confident that we could have a modified GAT working for ITSC
- However, a result using a Line Graph formulation may still be appropriate for the level of ITSC
- We could extend to a modified GAT architecture for edge-features as part of a journal paper

-----------------------------
Edge-based features: takeaways
-----------------------------
- These frameworks exist and are called message passing layers
- They aren't as well-studied as frameworks with only node-based features
- I skimmed several papers to see if they would be applicable, and some may be
-- GAT could be modified to include edge features as part of it's message passing
-- However, I don't understand the methods well enough to have confidence that it could be implemented in the time required for ITSC
-- Here are resources I would use to accomplish this
https://github.com/rusty1s/pytorch_geometric/issues/516
https://pytorch-geometric.readthedocs.io/en/latest/notes/create_gnn.html
https://pytorch-geometric.readthedocs.io/en/latest/_modules/torch_geometric/nn/conv/gat_conv.html#GATConv
https://pytorch-geometric.readthedocs.io/en/latest/modules/nn.html
https://docs.dgl.ai/en/0.4.x/tutorials/models/1_gnn/9_gat.html
https://www.aclweb.org/anthology/N18-2074.pdf
http://openaccess.thecvf.com/content_CVPR_2019/papers/Gong_Exploiting_Edge_Features_for_Graph_Neural_Networks_CVPR_2019_paper.pdf
https://arxiv.org/pdf/1805.03280.pdf
https://arxiv.org/pdf/1806.09835.pdf


- There is a mathematical structure called the Line Graph that let's us use links as nodes
-- It's like an inverse graph, switching nodes and edges
https://en.wikipedia.org/wiki/Line_graph
-- Networkx provides a way to easily switch from a graph to it's line graph
https://networkx.github.io/documentation/networkx-1.10/reference/generated/networkx.generators.line.line_graph.html
-- using the Line Graph, edge features in the original graph G become node features in L(G)
-- this allow us to leverage our existing code with less work up front
--- can focus more on improving STGCN accuracy for airports and work on the train data extraction

Conclusion:
- if we had more time, we could look into leveraging edge features in our architecture
-- we could do this if the work turns into a journal paper

- with current time constraints (for ITSC), I would rather go with a node-based architecture that works on the Line Graph of the rail network


-----------------------------
Edge-based features
-----------------------------
construction of Adjacency for STGCN
- only use physical distance between road network speed sensors (checkpoints), not the topology of the road


https://www.arxiv-vanity.com/papers/1802.04944/
https://link.springer.com/content/pdf/10.1007/s00607-018-0622-9.pdf


-----------------------------
a note on dynamic graphs
-----------------------------
there  are  still  no  effectivemethods  for  dealing  with  dynamic  graphs  as  wellas modeling non-structural sensory data. We providea  thorough  analysis  of  each  problem  and  proposefuture research directions

Another challenging problem is howto deal with graphs with dynamic structures. Static graphsare stable so they can be modeled feasibly, while dynamicgraphs  introduce  changing  structures.  When  edges  andnodes appear or disappear, GNN can not change adaptively.Dynamic  GNN  is  being  actively  researched  on  and  webelieve  it  to  be  a  big  milestone  about  the  stability  andadaptability of general GNN
https://en.wikipedia.org/wiki/Dynamic_connectivity
Y. Wang, Y. Sun, Z. Liu, S. E. Sarma, M. M. Bronstein, and J. M.Solomon,  “Dynamic  graph  cnn  for  learning  on  point  clouds,”arXiv preprint arXiv:1801.07829, 2018.
https://openreview.net/forum?id=HyePrhR5KX

