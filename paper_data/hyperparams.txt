elif args.dataset == "raildelays":
    n_nodes = 40
    n_timesteps_per_day = 42
    n_timesteps_in = 12
    n_timesteps_future = 6
    inf_mode = "individual"
    n_features_in = 1
    n_features_out = 1

# data parameters
parser.add_argument("--n_nodes", type=int, default=n_nodes)
parser.add_argument("--n_timesteps_per_day", type=int, default=n_timesteps_per_day)
parser.add_argument("--n_timesteps_in", type=int, default=n_timesteps_in)
parser.add_argument("--n_timesteps_future", type=int, default=n_timesteps_future)
parser.add_argument("--inf_mode", type=str, default=inf_mode, choices={"individual", "multiple"}, help="available inference modes\n\
                                                individual: the model is fit to a single timestep at n_timesteps_future in the future\n\
                                                multiple: the model is fit to all timesteps between present and n_timesteps_future in the future")
parser.add_argument("--approx", type=str, default="cheb_poly", choices={"cheb_poly", "first_order"})

# kernel sizes for spatial (graph) and temporal convolutions
# don't change these sizes, the convolutions won't work otherwise
parser.add_argument("--ks", type=int, default=5)
parser.add_argument("--kt", type=int, default=3)

# training parameters
parser.add_argument("--batch_size", type=int, default=100)
parser.add_argument("--n_epochs", type=int, default=25)
parser.add_argument("--learning_rate", type=int, default=1e-3)
parser.add_argument("--optimizer", type=str, default="ADAM", choices={"ADAM"})
parser.add_argument("--drop_prob", type=int, default=0.0)
